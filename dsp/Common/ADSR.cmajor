namespace Common
{
    processor ADSR {
        input event float attack;
        input event float decay;
        input event float sustain;
        input event float release;
        input event int modeIn;

        input event ( std::notes::NoteOn, std::notes::NoteOff ) eventIn;

        output stream float gainOut;
        
        float keyDownVelocity, currentLevel, attackSeconds, decaySeconds, sustainLevel, releaseSeconds;
        float minimumLevel = 0.001f;
        bool newNoteOn = true;

        // 0 = Linear, 1 = Exponential
        int mode = 1;

        float interpolateValue(float in, float exponent, float minimum, float maximum) {
            let scaledInput = pow(in, exponent);
            return minimum + scaledInput * (maximum - minimum);
        }

        event attack (float attack) {
            attackSeconds = interpolateValue(attack, 2.5f, 0.003f, 5.0f);
        }

        event decay (float decay) {
            decaySeconds = interpolateValue(decay, 2.5f, 0.01f, 5.0f);
        }

        event sustain (float sustain) {
            sustainLevel = max(minimumLevel, sustain);
        }

        event release (float release) {
            releaseSeconds = max(0.01f, release);
        }

        event eventIn (std::notes::NoteOn noteOn) { 
            keyDownVelocity = noteOn.velocity; 
            newNoteOn = true;
        }

        event eventIn (std::notes::NoteOff noteOff) {
            keyDownVelocity = 0;
        }

        event modeIn(int m) {
            mode = m;
        }

        // @todo: revisit how this works, decay and release times seem very short on exp mode
        float calculateMultiplier(float startLevel, float endLevel, int32 lengthInSamples) {
            if (mode == 0) {
                return 1;
            }
            return 1.0f + (log(endLevel) - log(startLevel)) / (lengthInSamples);
        }

        float calculateLinearStep(float startLevel, float endLevel, int32 lengthInSamples) {
            if (mode == 1) {
                return 0;
            }
            return (endLevel - startLevel) / float(lengthInSamples);
        }

        void main()
        {
            loop
            {
                while (keyDownVelocity == 0)
                    advance();

                newNoteOn = false;

                // Attack
                int32 attackSamples = int32(attackSeconds * float32(processor.frequency));
                currentLevel = max(minimumLevel, currentLevel);
                float target = keyDownVelocity;
                float stepSize = 0.0f;
                
                if (mode == 1) {
                    float attackCoeff = exp(-3.2f / attackSamples);
                    while (attackSamples > 0 && keyDownVelocity > 0 && !newNoteOn)
                    {
                        currentLevel = currentLevel * attackCoeff + target * (1.0f - attackCoeff);
                        gainOut <- currentLevel;
                        advance();
                        attackSamples -= 1;
                    }
                } else {
                    stepSize = calculateLinearStep(currentLevel, target, attackSamples);
                    while (attackSamples > 0 && keyDownVelocity > 0 && !newNoteOn)
                    {
                        currentLevel += stepSize;
                        gainOut <- currentLevel;
                        advance();
                        attackSamples -= 1;
                    }
                }

                // Decay
                let decaySamples = int32(decaySeconds * float32(processor.frequency));
                let sustainAt = sustainLevel * keyDownVelocity;
                float multiplier = calculateMultiplier(currentLevel, sustainAt, decaySamples);
                stepSize = calculateLinearStep(currentLevel, sustainAt, decaySamples);
                
                while (currentLevel > sustainAt && keyDownVelocity > 0 && !newNoteOn)
                {
                    gainOut <- currentLevel;
                    currentLevel *= multiplier;
                    currentLevel += stepSize;
                    advance();
                }
                
                // Sustain
                while (keyDownVelocity != 0 && !newNoteOn)
                {
                    gainOut <- currentLevel;
                    advance();
                }

                // Release
                let releaseSample = int32(releaseSeconds * float32(processor.frequency));
                multiplier = calculateMultiplier(currentLevel, minimumLevel, releaseSample);
                stepSize = calculateLinearStep(currentLevel, minimumLevel, releaseSample);
                
                while (currentLevel > minimumLevel && !newNoteOn)
                {
                    gainOut <- currentLevel;
                    currentLevel *= multiplier;
                    currentLevel += stepSize;
                    advance();
                }

                gainOut <- currentLevel;
                advance();
            }
        }
    }
}