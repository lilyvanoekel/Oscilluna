namespace Common
{
    processor Phaser {
        input stream float in;
        output stream float out;

        input event float coefficientIn;
        input event float rateHzIn;
        input event float spreadIn;
        input event float depthIn;
        input event bool doubeFiltersIn;

        float rate = 0.5f;
        float spread = 1.0f;
        bool doubleFilters = true;

        node {
            crossover = std::filters::crossover::Processor (200.0f);
            lfo1 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f);
            lfo2 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f);
            lfo3 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f);
            lfo4 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f);
            block1 = AllPassFilterBlock;
            block2 = AllPassFilterBlock;
        }
        
        event coefficientIn(float f) {
            block1.coefficientIn <- f;
            block2.coefficientIn <- f;
        }

        event rateHzIn(float f) {
            rate = f;
            setRates();
        }

        event spreadIn(float f) {
            spread = f;
            setRates();
        }

        event depthIn(float f) {
            block1.depthIn <- f;
            block2.depthIn <- f;
        }

        event doubeFiltersIn(bool d) {
            doubleFilters = d;
        }

        void setRates() {
            let rate1 = 1.0f + spread * (0.93f - 1.0f);
            let rate2 = 1.0f + spread * (1.12f - 1.0f);
            let rate3 = 1.0f + spread * (1.06f - 1.0f);
            let rate4 = 1.0f + spread * (0.73f - 1.0f);
            
            lfo1.rateHzIn <- rate * rate1;
            lfo2.rateHzIn <- rate * rate2;
            lfo3.rateHzIn <- rate * rate3;
            lfo4.rateHzIn <- rate * rate4;
            lfo1.syncIn <- 0;
            lfo2.syncIn <- 0;
            lfo3.syncIn <- 0;
            lfo4.syncIn <- 0;
        }

        void main() {
            loop {
                crossover.in <- in;

                block1.in <- crossover.highOut;
                block1.coefficientMod1 <- lfo1.out;
                block1.coefficientMod2 <- lfo2.out;
                block1.coefficientMod3 <- lfo3.out;
                block1.coefficientMod4 <- lfo4.out;

                if (doubleFilters) {
                    block2.coefficientMod1 <- lfo1.out;
                    block2.coefficientMod2 <- lfo2.out;
                    block2.coefficientMod3 <- lfo3.out;
                    block2.coefficientMod4 <- lfo4.out;

                    block2.in <- block1.out;
                    out <- block2.out * 0.5f;
                    block2.advance();
                } else {
                    out <- block1.out * 0.5f;
                }
                
                out <- crossover.highOut * 0.5f;
                out <- crossover.lowOut;
                
                block1.advance();
                lfo1.advance();
                lfo2.advance();
                lfo3.advance();
                lfo4.advance();
                crossover.advance();
                advance();
            }
        }
    }

    graph AllPassFilterBlock {
        input stream float in;
        output stream float out;

        input stream float coefficientMod1;
        input stream float coefficientMod2;
        input stream float coefficientMod3;
        input stream float coefficientMod4;

        input event float coefficientIn;
        input event float depthIn;

        event coefficientIn(float c) {
            apf1.coefficientIn <- c;
            apf2.coefficientIn <- c;
            apf3.coefficientIn <- c;
            apf4.coefficientIn <- c;
        }

        event depthIn(float f) {
            apf1.modDepthIn <- f;
            apf2.modDepthIn <- f;
            apf3.modDepthIn <- f;
            apf4.modDepthIn <- f;
        }

        node {
            apf1 = Common::Filters::AllPassFilter;
            apf2 = Common::Filters::AllPassFilter;
            apf3 = Common::Filters::AllPassFilter;
            apf4 = Common::Filters::AllPassFilter;
        }

        connection {
            coefficientMod1 -> apf1.coefficientMod;
            coefficientMod2 -> apf2.coefficientMod;
            coefficientMod3 -> apf3.coefficientMod;
            coefficientMod4 -> apf4.coefficientMod;

            in -> apf1.in;
            apf1 -> apf2.in;
            apf2 -> apf3.in;
            apf3 -> out;
        }
    }
}
