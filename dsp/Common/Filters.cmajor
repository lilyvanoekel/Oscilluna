namespace Common
{
    namespace Filters {
        processor AllPassFilter {
            input stream float in;
            output stream float out;

            input stream float coefficientMod;
            input event float coefficientIn;
            input event float modDepthIn;

            float state = 0.0f;
            float coefficient = 0.5f;
            float modDepth = 0.2f;

            event coefficientIn(float coef) {
                coefficient = clamp(coef, 0.2f, 0.8f);
            }

            event modDepthIn(float f) {
                modDepth = f * 0.2f;
            }

            void main()
            {
                loop
                {
                    let moddedCoefficient = coefficient + coefficientMod * modDepth;
                    let result = -moddedCoefficient * in + state;
                    state = in + moddedCoefficient * result;
                    out <- result;
                    advance();
                }
            }
        }

        // Another moog style, source: DaisySP https://github.com/electro-smith/DaisySP
        processor ResonantLowpass {
            input stream float in;
            output stream float out;
            input stream float freqModIn;

            input event float cutoff;
            input event float resonance;

            float cutoff_;
            float resonance_;
            float srIntRecip;
            float alpha, K, qAdjust, pbg;
            float[4] z0, z1, beta;

            void init() {
                srIntRecip = 1.0f / float(processor.frequency);
                alpha = 1.0f;
                K = 1.0f;
                cutoff_ = 1000.0f;
                qAdjust = 1.0f;
                pbg = 0.5f;
            }

            event cutoff(float f) {
                
                cutoff_ = min(f, 14112.0f);
            }

            event resonance(float f) {
                resonance_ = clamp(f, 0.0f, 1.8f);
                K = 4.0f * resonance_;
            }

            float LPF(float s, wrap<4> i) {
                float ft = s * 0.76923077f + 0.23076923f * z0[i] - z1[i];
                ft = ft * alpha + z1[i];
                z1[i] = ft;
                z0[i] = s;
                return ft;
            }

            void main() {
                loop {
                    // @todo figure out with testing and fix better
                    let freq = clamp(cutoff_ * (1.0f + freqModIn), 5.0f, 14112.0f);

                    let wc = freq * 2.0f * 3.1415926535897931f * srIntRecip;
                    let wc2 = wc * wc;
                    alpha = 0.9892f * wc - 0.4324f * wc2 + 0.1381f * wc * wc2 - 0.0202f * wc2 * wc2;
                    qAdjust = 1.006f + 0.0536f * wc - 0.095f * wc2 - 0.05f * wc2 * wc2;
                    
                    float u = in - (z1[3] - pbg * in) * K * qAdjust;
                    u = Util::fastTanh(u);
                    let stage1 = LPF(u, 0);
                    let stage2 = LPF(stage1, 1);
                    let stage3 = LPF(stage2, 2);
                    let stage4 = LPF(stage3, 3);
                    out <- stage4;
                    advance();
                }
            }
        }

        processor ResonantLowpass2 {
            input stream float in;
            output stream float out;
            input stream float freqModIn;

            input event float cutoff;
            input event float resonance;

            float cut_lp, res_lp, fb_lp;
            float n3 = 0.0f, n4 = 0.0f;
            float cutoff_;
            float resonance_;

            event cutoff(float f) {
                cutoff_ = f;
            }

            event resonance(float f) {
                resonance_ = clamp(f, 0.0f, 1.0f);
            }

            void main() {
                loop {
                    cut_lp = clamp(cutoff_ * (1.0f + freqModIn) * 2.0f / float(processor.frequency), 0.0f, 0.99f);
                    fb_lp = resonance_ + resonance_ / (1.0f - cut_lp);

                    n3 = n3 + cut_lp * (in - n3 + Util::fastTanh(fb_lp * (n3 - n4)));
                    n4 = n4 + cut_lp * (n3 - n4);

                    out <- n4;
                    advance();
                }
            }
        }



    }
}