namespace Synth
{
    processor WaveBuilder
    {
        input event float[] controlPoints;
        output event float[] waveOut;

        float[WAVETABLE_TOTAL_SIZE] waveforms;

        float[TABLE_SIZE] waveform;

        event controlPoints (float[] points) {
            // Float64 probably not needed here. There were issues with 24 control points, raising to 32 fixed it.
            // Float32 -> float64 had no discernible advantage, but leaving it in for now. 
            let segmentCount = CONTROL_POINTS;
            int segmentLength = TABLE_SIZE / segmentCount;

            for (wrap<TABLE_SIZE> i) {
                float64 t = float64(i % segmentLength) / float64(segmentLength);
                int segmentIndex = i / segmentLength;

                // Circular control point indexing
                float64 p0 = points[wrap<CONTROL_POINTS>((segmentIndex - 1 + segmentCount))];
                float64 p1 = points[wrap<CONTROL_POINTS>(segmentIndex)];
                float64 p2 = points[wrap<CONTROL_POINTS>((segmentIndex + 1))];
                float64 p3 = points[wrap<CONTROL_POINTS>((segmentIndex + 2))];

                // Interpolating using Catmull-Rom spline formula
                waveform[wrap<TABLE_SIZE>(i)] = float32(0.5 * (
                    (2.0 * p1) +
                    (-p0 + p2) * t +
                    (2.0 * p0 - 5.0 * p1 + 4.0 * p2 - p3) * t * t +
                    (-p0 + 3.0 * p1 - 3.0 * p2 + p3) * t * t * t
                ));
            }

            float mean = 0.0;
            for (wrap<TABLE_SIZE> i) {
                mean += waveform[i];
            }
            mean /= float(TABLE_SIZE);

            for (wrap<TABLE_SIZE> i) {
                waveform[i] -= mean;
            }

            float maxAbsValue = 0.0;
            for (wrap<TABLE_SIZE> i) {
                float absValue = abs(waveform[i]);
                if (absValue > maxAbsValue) {
                    maxAbsValue = absValue;
                }
            }

            if (maxAbsValue > 0.0) {
                for (wrap<TABLE_SIZE> i) {
                    waveform[i] /= maxAbsValue;
                }
            }

            let nyquistFrequency = (processor.frequency / 2.0f) * 0.9f;
            int halfTableSize = TABLE_SIZE / 2.0f;
            for (wrap<WAVETABLE_NUM_BUCKETS> i)
            {
                float frequency = Util::wavetable_index_to_max_frequency(i, WAVETABLE_BUCKETS_MIN_FREQUENCY, WAVETABLE_BUCKETS_MAX_FREQUENCY, WAVETABLE_NUM_BUCKETS);
                float[TABLE_SIZE] frequencyData;
                float[TABLE_SIZE] waveResult;
                std::frequency::realOnlyForwardFFT(waveform, frequencyData);

                for (int j = 1; j < TABLE_SIZE / 2; ++j)
                {
                    float harmonicFrequency = j * frequency;
                    if (harmonicFrequency > nyquistFrequency)
                    {
                        frequencyData[wrap<TABLE_SIZE>(j)] = 0.0;
                        frequencyData[wrap<TABLE_SIZE>(j + halfTableSize)] = 0.0;
                    }
                }
                std::frequency::realOnlyInverseFFT(frequencyData, waveResult);
                for (wrap<TABLE_SIZE> j) {
                    waveforms[wrap<WAVETABLE_TOTAL_SIZE>(i * TABLE_SIZE + j)] = waveResult[j];
                }
            }

            waveOut <- waveforms;
        }
    }
}
