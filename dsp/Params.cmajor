namespace Synth
{
    struct Params
    {
        float adsr1Attack;
        float adsr1Decay;
        float adsr1Sustain;
        float adsr1Release;
        int adsr1Mode;

        float adsr2Attack;
        float adsr2Decay;
        float adsr2Sustain;
        float adsr2Release;
        int adsr2Mode;

        float osc1Level;
        float osc2Level;
        float osc1Coarse;
        float osc2Coarse;
        float osc1Fine;
        float osc2Fine;

        int fmDirection;
        float fmDepth;
        float osc1Wavefolding;
        float osc2Wavefolding;

        float osc1VibratoRate;
        float osc2VibratoRate;
        float osc1VibratoDepth;
        float osc2VibratoDepth;

        float osc1FeedbackFm;
        float osc2FeedbackFm;

        bool filterBypass;
        float cutoff;
        float resonance;

        bool chorusBypass;
        float chorusRate;
        float chorusDepth;
        float chorusDelayTime;
        float chorusFeedback;
        float chorusWetDryMix;

        int phaserMode;
        float phaserRate;
        float phaserSpread;
        float phaserCoef;
        float phaserDepth;
        float phaserAmount;

        float brilliance;
    }

    Params createParams()
    {
        Params p;

        p.adsr1Attack = 0.1f;
        p.adsr1Decay = 0.1f;
        p.adsr1Sustain = 0.7f;
        p.adsr1Release = 0.1f;
        p.adsr1Mode = 1;

        p.adsr2Attack = 0.1f;
        p.adsr2Decay = 0.1f;
        p.adsr2Sustain = 0.7f;
        p.adsr2Release = 0.1f;
        p.adsr2Mode = 1;

        p.osc1Level = 0.0f;
        p.osc2Level = 0.0f;
        p.osc1Coarse = 0.0f;
        p.osc2Coarse = 0.0f;
        p.osc1Fine = 0.0f;
        p.osc2Fine = 0.0f;

        p.fmDirection = 1;
        p.fmDepth = 0.5f;
        p.osc1Wavefolding = 0.0f;
        p.osc2Wavefolding = 0.0f;

        p.osc1VibratoRate = 0.0f;
        p.osc2VibratoRate = 0.0f;
        p.osc1VibratoDepth = 0.0f;
        p.osc2VibratoDepth = 0.0f;

        p.osc1FeedbackFm = 0.0f;
        p.osc2FeedbackFm = 0.0f;

        p.filterBypass = true;
        p.cutoff = 8000.0f;
        p.resonance = 0.0f;

        p.chorusBypass = true;
        p.chorusRate = 0.6f;
        p.chorusDepth = 0.35f;
        p.chorusDelayTime = 20.0f;
        p.chorusFeedback = 0.0f;
        p.chorusWetDryMix = 0.5f;

        p.phaserMode = 0;
        p.phaserRate = 0.7f;
        p.phaserDepth = 1.0f;
        p.phaserSpread = 0.0f;
        p.phaserCoef = 0.75f;
        p.phaserAmount = 1.0f;

        p.brilliance = 0.0f;

        return p;
    }

    graph ParamSplitter {
        input event Params paramsIn;

        output event float adsr1Attack;
        output event float adsr1Decay;
        output event float adsr1Sustain;
        output event float adsr1Release;
        output event int adsr1Mode;

        output event float adsr2Attack;
        output event float adsr2Decay;
        output event float adsr2Sustain;
        output event float adsr2Release;
        output event int adsr2Mode;

        output event float osc1Level, osc2Level;
        output event float osc1Coarse, osc2Coarse;
        output event float osc1Fine, osc2Fine;

        output event int fmDirection;
        output event float fmDepth;
        output event float osc1Wavefolding, osc2Wavefolding;
        output event float osc1VibratoRate, osc2VibratoRate;
        output event float osc1VibratoDepth, osc2VibratoDepth;

        output event bool filterBypass;
        output event float cutoff;
        output event float resonance;

        output event float brilliance;

        event paramsIn(Params p) {
            adsr1Attack <- p.adsr1Attack;
            adsr1Decay <- p.adsr1Decay;
            adsr1Sustain <- p.adsr1Sustain;
            adsr1Release <- p.adsr1Release;
            adsr1Mode <- p.adsr1Mode;

            adsr2Attack <- p.adsr2Attack;
            adsr2Decay <- p.adsr2Decay;
            adsr2Sustain <- p.adsr2Sustain;
            adsr2Release <- p.adsr2Release;
            adsr2Mode <- p.adsr2Mode;

            osc1Level <- p.osc1Level;
            osc2Level <- p.osc2Level;
            osc1Coarse <- p.osc1Coarse;
            osc2Coarse <- p.osc2Coarse;
            osc1Fine <- p.osc1Fine;
            osc2Fine <- p.osc2Fine;

            fmDirection <- p.fmDirection;
            fmDepth <- p.fmDepth;
            osc1Wavefolding <- p.osc1Wavefolding;
            osc2Wavefolding <- p.osc2Wavefolding;

            osc1VibratoRate <- p.osc1VibratoRate;
            osc2VibratoRate <- p.osc2VibratoRate;
            osc1VibratoDepth <- p.osc1VibratoDepth;
            osc2VibratoDepth <- p.osc2VibratoDepth;

            filterBypass <- p.filterBypass;
            cutoff <- p.cutoff;
            resonance <- p.resonance;

            brilliance <- p.brilliance;
        }
    }

    processor ParamsProcessor
    {
        input event float adsr1_attack  [[ name: "adsr1_attack", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr1_decay   [[ name: "adsr1_decay", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr1_sustain [[ name: "adsr1_sustain", min: 0.0, max: 1.0, init: 0.7 ]];
        input event float adsr1_release [[ name: "adsr1_release", min: 0.0, max: 1.0, init: 0.1 ]];
        input event int adsr1_mode      [[ name: "adsr1_mode", min: 0, max: 1, init: 1, text: "Linear|Exponential" ]];

        input event float adsr2_attack  [[ name: "adsr2_attack", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr2_decay   [[ name: "adsr2_decay", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr2_sustain [[ name: "adsr2_sustain", min: 0.0, max: 1.0, init: 0.7 ]];
        input event float adsr2_release [[ name: "adsr2_release", min: 0.0, max: 1.0, init: 0.1 ]];
        input event int adsr2_mode      [[ name: "adsr2_mode", min: 0, max: 1, init: 1, text: "Linear|Exponential" ]];

        input event float osc1_level    [[ name: "osc1_level", unit: "dB", min: -85, max: 6, init: 0 ]];
        input event float osc2_level    [[ name: "osc2_level", unit: "dB", min: -85, max: 6, init: 0 ]];

        input event float osc1_coarse   [[ name: "osc1_coarse", min: -2, max: 2, init: 0, step: 1 ]];
        input event float osc2_coarse   [[ name: "osc2_coarse", min: -2, max: 2, init: 0, step: 1 ]];

        input event float osc1_fine     [[ name: "osc1_fine", min: -20, max: 20, init: 0, step: 1 ]];
        input event float osc2_fine     [[ name: "osc2_fine", min: -20, max: 20, init: 0, step: 1 ]];

        input event int fm_direction    [[ name: "fm_direction", min:0, max:2, init: 0, step: 1]];
        input event float fm_depth      [[ name: "fm_depth", min: 0, max: 1, init: 0.5]];

        input event float osc1_wavefolding      [[ name: "osc1_wavefolding", min: 0.9, max: 2, init: 0, step: 0.1 ]];
        input event float osc2_wavefolding      [[ name: "osc2_wavefolding", min: 0.9, max: 2, init: 0, step: 0.1 ]];

        input event float osc1_vibrato_rate     [[ name: "osc1_vibrato_rate", min: 0.5, max: 10.0, init: 0.423 ]];
        input event float osc2_vibrato_rate     [[ name: "osc2_vibrato_rate", min: 0.5, max: 10.0, init: 0.8146 ]];
        input event float osc1_vibrato_depth    [[ name: "osc1_vibrato_depth", min: 0.0, max: 1.0, init: 0.0 ]];
        input event float osc2_vibrato_depth    [[ name: "osc2_vibrato_depth", min: 0.0, max: 1.0, init: 0.0 ]];

        input event float osc1_feedback_fm      [[ name: "osc1_feedback_fm", min: 0.0, max: 1.0, init: 0.0 ]];
        input event float osc2_feedback_fm      [[ name: "osc2_feedback_fm", min: 0.0, max: 1.0, init: 0.0 ]];

        input event bool filter_enabled         [[ name: "filter_enabled", boolean, init: false ]];
        input event float cutoff                [[ name: "cutoff", min: 440, max: 12000, init: 2000, step: 1 ]];
        input event float resonance             [[ name: "resonance", min: 0, max: 1, init: 0.5 ]];

        input event bool chorus_enabled             [[ name: "chorus_enabled", boolean, init: false ]];
        input event float chorus_rate               [[ name: "chorus_rate", min: 0.1, max: 5.0, init: 0.6 ]];
        input event float chorus_depth              [[ name: "chorus_depth", min: 0.0, max: 1.0, init: 0.35 ]];
        input event float chorus_delay_time         [[ name: "chorus_delay_time", min: 5, max: 100, init: 20.0 ]];
        
        // @todo: feedback is still unstable, fix some time, or remove
        // input event float chorus_feedback           [[ name: "chorus_feedback", min: 0, max: 1, init: 0.0 ]];
        input event float chorus_wetdrymix          [[ name: "chorus_wetdrymix", min: 0, max: 1, init: 0.5 ]];

        input event int phaser_mode                 [[ name: "phaser_mode", min: 0, max: 2, init: 0, text: "Off|4 Stages|8 Stages"  ]];
        input event float phaser_rate               [[ name: "phaser_rate", min: 0.2, max: 2.0, init: 0.7 ]];
        input event float phaser_spread             [[ name: "phaser_spread", min: 0.0, max: 1.0, init: 0.0 ]];
        input event float phaser_coef               [[ name: "phaser_coef", min: 0.2, max: 0.8, init: 0.75 ]];
        input event float phaser_depth              [[ name: "phaser_depth", min: 0.0, max: 1.0, init: 1.0 ]];
        input event float phaser_amount             [[ name: "phaser_amount", min: 0.0, max: 1.0, init: 1.0 ]];
        
        input event float brilliance                [[ name: "brilliance", min: 0.0, max: 1.0, init: 0.0 ]];


        output event Params paramsOut;

        Params params = createParams();

        void update() {
            paramsOut <- params;
        }

        event adsr1_attack (float f)            { params.adsr1Attack = f;           update(); }
        event adsr1_decay (float f)             { params.adsr1Decay = f;            update(); }
        event adsr1_sustain (float f)           { params.adsr1Sustain = f;          update(); }
        event adsr1_release (float f)           { params.adsr1Release = f;          update(); }
        event adsr1_mode (int m)                { params.adsr1Mode = m;             update(); }
        event adsr2_attack (float f)            { params.adsr2Attack = f;           update(); }
        event adsr2_decay (float f)             { params.adsr2Decay = f;            update(); }
        event adsr2_sustain (float f)           { params.adsr2Sustain = f;          update(); }
        event adsr2_release (float f)           { params.adsr2Release = f;          update(); }
        event adsr2_mode (int m)                { params.adsr2Mode = m;             update(); }
        event osc1_level (float f)              { params.osc1Level = f;             update(); }
        event osc2_level (float f)              { params.osc2Level = f;             update(); }
        event osc1_coarse (float f)             { params.osc1Coarse = f;            update(); }
        event osc2_coarse (float f)             { params.osc2Coarse = f;            update(); }
        event osc1_fine (float f)               { params.osc1Fine = f;              update(); }
        event osc2_fine (float f)               { params.osc2Fine = f;              update(); }
        event fm_direction (int f)              { params.fmDirection = f;           update(); }
        event fm_depth (float f)                { params.fmDepth = f;               update(); }
        event osc1_wavefolding (float f)        { params.osc1Wavefolding = f;       update(); }
        event osc2_wavefolding (float f)        { params.osc2Wavefolding = f;       update(); }
        event osc1_vibrato_rate (float f)       { params.osc1VibratoRate = f;       update(); }
        event osc2_vibrato_rate (float f)       { params.osc2VibratoRate = f;       update(); }
        event osc1_vibrato_depth (float f)      { params.osc1VibratoDepth = f;      update(); }
        event osc2_vibrato_depth (float f)      { params.osc2VibratoDepth = f;      update(); }
        event osc1_feedback_fm (float f)        { params.osc1FeedbackFm = f;        update(); }
        event osc2_feedback_fm (float f)        { params.osc2FeedbackFm = f;        update(); }
        event cutoff (float f)                  { params.cutoff = f;                update(); }
        event resonance (float f)               { params.resonance = f;             update(); }
        event filter_enabled (bool b)           { params.filterBypass = !b;         update(); }
        event chorus_enabled (bool b)           { params.chorusBypass = !b;         update(); }
        event chorus_rate (float f)             { params.chorusRate = f;            update(); }
        event chorus_depth (float f)            { params.chorusDepth = f;           update(); }
        event chorus_delay_time (float f)       { params.chorusDelayTime = f;       update(); }
        // event chorus_feedback (float f)         { params.chorusFeedback = f;        update(); }
        event chorus_wetdrymix (float f)        { params.chorusWetDryMix = f;       update(); }
        event phaser_mode (int m)               { params.phaserMode = m;            update(); }
        event phaser_rate (float f)             { params.phaserRate = f;            update(); }
        event phaser_spread (float f)           { params.phaserSpread = f;          update(); }
        event phaser_coef (float f)             { params.phaserCoef = f;            update(); }
        event phaser_depth (float f)            { params.phaserDepth = f;           update(); }
        event phaser_amount (float f)           { params.phaserAmount = f;          update(); }
        event brilliance(float f)               { params.brilliance = f;            update(); }

    }
}