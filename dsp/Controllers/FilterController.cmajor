namespace Synth
{
    namespace Controllers
    {
        processor Filter {
            input stream float in;
            output stream float out;

            input event Params paramsIn;
            input event float cutoff1;
            input event float cutoff2;

            input stream float osc1;
            input stream float osc2;

            input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;

            node
            {
                filter1 = Common::Filters::ResonantLowpass;
                filter2 = Common::Filters::ResonantLowpass;
                adsr = Common::ADSR;
                lfo = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f);
            }
            
            bool bypass_ = false;
            int modMode = 0;
            float depth = 0.0f;

            event cutoff1(float f) { filter1.cutoff <- f; }
            event cutoff2(float f) { filter2.cutoff <- f; }
            
            event paramsIn(Params p) {
                filter1.resonance <- p.filter1Resonance;
                filter2.resonance <- p.filter1Resonance;
                bypass_ = p.filter1Mode == 0;

                adsr.attack <- p.filterModAttack;
                adsr.decay <- p.filterModDecay;
                adsr.sustain <- p.filterModSustain;
                adsr.release <- p.filterModRelease;
                adsr.modeIn <- p.filterMod == 3 ? 1 : 0;

                depth = p.filterModDepth;
                modMode = p.filterMod;

                lfo.rateHzIn <- p.filterModRate;
            }

            event eventIn(std::notes::NoteOn n) {
                adsr.eventIn <- n;
            }

            event eventIn(std::notes::NoteOff n) {
                adsr.eventIn <- n;
            }

            void main() {
                loop {
                    if (bypass_) {
                        out <- in;
                    } else {
                        float modSample = 0.0f;

                        if (modMode == 2 || modMode == 3) {
                            modSample = 1.0f - depth + adsr.gainOut * depth - 1.0f;
                            adsr.advance();
                        } else if (modMode == 4) {
                            // @todo: look into
                            modSample = osc1 * 2.5f * depth;
                        } else if (modMode == 5) {
                            // @todo: look into
                            modSample = osc2 * 2.5f * depth;
                        } else if (modMode == 1) {
                            modSample = lfo.out * depth;
                            lfo.advance();
                        }

                        filter1.in <- in;
                        filter1.freqModIn <- modSample;
                        out <- filter1.out;
                        
                        filter1.advance();
                    }
                    advance();
                }
            }
        }
    }
}