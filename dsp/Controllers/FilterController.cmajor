namespace Synth
{
    namespace Controllers
    {
        // @todo: this processor is a nightmare of branching, can't be good for performance
        // Unclear how to fix at the moment, as the usual avenues are unavailable.
        processor Filter {
            input stream float in;
            output stream float out;

            input event Params paramsIn;
            input event float cutoff1;
            input event float cutoff2;

            input stream float osc1;
            input stream float osc2;

            input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;

            node
            {
                filter1lp1 = Common::Filters::ResonantLowpass;
                filter1lp2 = Common::Filters::ResonantLowpass2;
                filter2lp1 = Common::Filters::ResonantLowpass;
                filter2lp2 = Common::Filters::ResonantLowpass2;
                adsr = Common::ADSR;
                lfo = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f);
            }
            
            int filter1Mode = 0;
            int filter2Mode = 0;
            int filterRouting = 0;
            int modMode = 0;
            float depth = 0.0f;
            float previousModSample = 0.0f;

            event cutoff1(float f) { 
                filter1lp1.cutoff <- f;
                filter1lp2.cutoff <- f;
            }

            event cutoff2(float f) {
                filter2lp1.cutoff <- f;
                filter2lp2.cutoff <- f;
            }
            
            event paramsIn(Params p) {
                filter1lp1.resonance <- p.filter1Resonance;
                filter1lp2.resonance <- p.filter1Resonance;
                filter2lp1.resonance <- p.filter2Resonance;
                filter2lp2.resonance <- p.filter2Resonance;

                filter1Mode = p.filter1Mode;
                filter2Mode = p.filter2Mode;
                filterRouting = p.filterRouting;
                
                adsr.attack <- p.filterModAttack;
                adsr.decay <- p.filterModDecay;
                adsr.sustain <- p.filterModSustain;
                adsr.release <- p.filterModRelease;
                adsr.modeIn <- p.filterMod == 3 ? 1 : 0;

                depth = p.filterModDepth;
                modMode = p.filterMod;

                lfo.rateHzIn <- p.filterModRate;
            }

            event eventIn(std::notes::NoteOn n) {
                adsr.eventIn <- n;
            }

            event eventIn(std::notes::NoteOff n) {
                adsr.eventIn <- n;
            }

            float runFilter1(float in) {
                float modSample = 0.0f;

                if (modMode == 2 || modMode == 3) {
                    modSample = 1.0f - depth + adsr.gainOut * depth - 1.0f;
                    adsr.advance();
                } else if (modMode == 4) {
                    // @todo: look into
                    modSample = (previousModSample + (osc1 * 2.5f * depth)) * 0.5f;
                    previousModSample = modSample;
                } else if (modMode == 5) {
                    // @todo: look into
                    modSample = (previousModSample + (osc2 * 2.5f * depth)) * 0.5f;
                    previousModSample = modSample;
                } else if (modMode == 1) {
                    modSample = lfo.out * depth;
                    lfo.advance();
                }

                float result = 0.0f;

                if (filter1Mode == 1) {
                    filter1lp1.in <- in;
                    filter1lp1.freqModIn <- modSample;
                    result = filter1lp1.out;
                    filter1lp1.advance();
                } else if (filter1Mode == 2) {
                    filter1lp2.in <- in;
                    filter1lp2.freqModIn <- modSample;
                    result = filter1lp2.out;
                    filter1lp2.advance();
                }
                
                return result;
            }

            float runFilter2(float in) {
                float result = 0.0f;

                if (filter2Mode == 1) {
                    filter2lp1.in <- in;
                    result = filter2lp1.out;
                    filter2lp1.advance();
                } else if (filter2Mode == 2) {
                    filter2lp2.in <- in;
                    result = filter2lp2.out;
                    filter2lp2.advance();
                }

                return result;
            }

            void main() {
                loop {
                    if (filter1Mode == 0 && filter2Mode == 0) {
                        out <- in;
                    } else if (filter2Mode == 0) {
                        out <- runFilter1(in);
                    } else if (filter1Mode == 0) {
                        out <- runFilter2(in);
                    } else if (filterRouting == 0) {
                        out <- runFilter1(in) + runFilter2(in);
                    } else if (filterRouting == 1) {
                        out <- runFilter2(runFilter1(in));
                    } else {
                        out <- runFilter1(runFilter2(in));
                    }
                    advance();
                }
            }
        }
    }
}