namespace Synth
{
    processor WavetableOscillator
    {
        input event float frequencyIn;
        input event float[] wavetableIn;
        input stream float gainIn;
        input stream float fmIn;
        input event float feedbackFmDepthIn;
        output stream float out;

        float64 phase = 0.0f;
        float64 phaseIncrement = 0.0;
        float freq = 0.0f;
        float[] wavetable;
        int wavetableIndex = 0;
        float prevfmIn = 0.0f;
        float prevSample = 0.0f;
        float prevPrevSample = 0.0f;
        float feedbackFmDepth = 0.0f;
        int indexOffset;

        event frequencyIn (float f)
        {
            freq = f;
            wavetableIndex = Util::frequency_to_wavetable_index(freq, WAVETABLE_BUCKETS_MIN_FREQUENCY, WAVETABLE_BUCKETS_MAX_FREQUENCY, WAVETABLE_NUM_BUCKETS);
            phaseIncrement = freq * (float(TABLE_SIZE) / float(processor.frequency));
            indexOffset = wavetableIndex * TABLE_SIZE;
        }

        event wavetableIn (float[] newTable)    { wavetable = newTable; }
        event feedbackFmDepthIn (float f)       { feedbackFmDepth = f;  }

        void main()
        {
            float tableSizeFloat = float(TABLE_SIZE);
            float maxFmIndex = tableSizeFloat * 2.0f;
            float maxFmFeedbackIndex = tableSizeFloat * 0.2f;
            
            loop
            {
                float64 localPhase = phase;
                
                localPhase += (0.5 * (fmIn + prevfmIn) * maxFmIndex);
                localPhase += (0.5f * (prevSample + prevPrevSample)) * feedbackFmDepth * maxFmFeedbackIndex;
                prevfmIn = fmIn;
                
                phase += phaseIncrement;

                // Wrap phase to stay within the bounds of the wavetable
                localPhase -= floor(localPhase / tableSizeFloat) * tableSizeFloat;
                phase -= floor(phase / tableSizeFloat) * tableSizeFloat;
                
                let index = wrap<TABLE_SIZE>(int32(localPhase));
                let nextIndex = wrap<TABLE_SIZE>(index + 1);
                let prevIndex = wrap<TABLE_SIZE>(index - 1);
                let nextNextIndex = wrap<TABLE_SIZE>(index + 2);
                
                float frac = float(localPhase) - float(index);
                
                // Fetch the four points needed for the interpolation
                float value0 = wavetable[indexOffset + prevIndex];
                float value1 = wavetable[indexOffset + index];
                float value2 = wavetable[indexOffset + nextIndex];
                float value3 = wavetable[indexOffset + nextNextIndex];
                 
                // Perform Hermite interpolation
                float slope0 = (value2 - value0) * 0.5f;
                float slope1 = (value3 - value1) * 0.5f;
                float c0 = value1;
                float c1 = slope0;
                float c2 = 3.0f * (value2 - value1) - 2.0f * slope0 - slope1;
                float c3 = 2.0f * (value1 - value2) + slope0 + slope1;
                float outputSample = ((c3 * frac + c2) * frac + c1) * frac + c0;
                
                prevPrevSample = prevSample;
                prevSample = outputSample;

                out <- outputSample * gainIn;
                
                advance();
            }
        }
    }
}