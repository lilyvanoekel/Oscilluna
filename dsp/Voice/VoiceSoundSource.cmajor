namespace Synth
{
    processor FilterBypass {
        input stream float in;
        output stream float out;

        input event float cutoff;
        input event float resonance;
        input event bool bypass;

        node filter = Common::Filters::ResonantLowpass;
        bool bypass_ = false;

        event cutoff(float f) { filter.cutoff <- f; }
        event resonance(float f) { filter.resonance <- f; }
        event bypass(bool b) { bypass_ = b; }

        void main() {
            loop {
                if (bypass_) {
                    out <- in;
                } else {
                    filter.in <- in;
                    out <- filter.out;
                    filter.advance();
                }
                advance();
            }
        }
    }
    
    graph VoiceSoundSource
    {
        input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
        input event Params paramsIn;

        input oscBank.wavetableIn1,
            oscBank.wavetableIn2,
            oscBank.vibrato1,
            oscBank.vibrato2,
            oscBank.vibratoDepth1,
            oscBank.vibratoDepth2,
            oscBank.osc1Gain,
            oscBank.osc2Gain;

        output stream float out;

        node
        {
            paramSplitter = ParamSplitter;
            oscBank = OscBank;
            noteToFrequency = Util::NoteToFrequency;
            level1 = std::levels::SmoothedGain(float, 0.002f);
            level2 = std::levels::SmoothedGain(float, 0.002f);
            coarseTuner1 = Util::TuneCoarse;
            coarseTuner2 = Util::TuneCoarse;
            fineTuner1 = Util::TuneFine;
            fineTuner2 = Util::TuneFine;
            waveFolder1 = Common::WaveFolder;
            waveFolder2 = Common::WaveFolder;
            filter = FilterBypass;
            cutoffCalc = Common::FilterCutoffCalculator;
        }

        connection
        {
            eventIn -> noteToFrequency;

            paramsIn -> oscBank.paramsIn;

            noteToFrequency -> coarseTuner1.in;
            noteToFrequency -> coarseTuner2.in;
            noteToFrequency -> cutoffCalc.noteFreq;

            coarseTuner1.out -> fineTuner1.in;
            coarseTuner2.out -> fineTuner2.in;

            fineTuner1.out -> oscBank.osc1FreqIn;
            fineTuner2.out -> oscBank.osc2FreqIn;

            paramsIn -> paramSplitter.paramsIn;

            paramSplitter.osc1Level -> level1.volume;
            paramSplitter.osc2Level -> level2.volume;
            paramSplitter.osc1Coarse -> coarseTuner1.octave;
            paramSplitter.osc2Coarse -> coarseTuner2.octave;
            paramSplitter.osc1Fine -> fineTuner1.cents;
            paramSplitter.osc2Fine -> fineTuner2.cents;

            paramSplitter.osc1Wavefolding -> waveFolder1.gain;
            paramSplitter.osc2Wavefolding -> waveFolder2.gain;

            paramSplitter.filterBypass -> filter.bypass;
            paramSplitter.cutoff -> cutoffCalc.baseCutoff;
            cutoffCalc.cutoff -> filter.cutoff;
            paramSplitter.resonance -> filter.resonance;

            oscBank.out1 -> waveFolder1.in;
            oscBank.out2 -> waveFolder2.in;

            waveFolder1.out -> level1.in;
            waveFolder2.out -> level2.in;

            level1 -> filter.in;
            level2 -> filter.in;

            filter.out -> out;
        }
    }
}