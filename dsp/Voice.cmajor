namespace Synth
{
    graph Voice
    {
        input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
        input event Params paramsIn;

        input stream float osc1Gain;
        input stream float osc2Gain;

        input oscillators.wavetableIn1,
            oscillators.wavetableIn2,
            oscillators.vibrato1,
            oscillators.vibrato2,
            oscillators.vibratoDepth1,
            oscillators.vibratoDepth2;

        output stream float out;

        node
        {
            p = ParamSplitter;
            oscillators = Controllers::Oscillators;
            noteToFrequency = Util::NoteToFrequency;
            level1 = Util::MultiplyStreams;
            level2 = Util::MultiplyStreams;
            levelSmoother1 = std::smoothing::SmoothedValueStream (0.02f);
            levelSmoother2 = std::smoothing::SmoothedValueStream (0.02f);
            coarseTuner1 = Util::TuneCoarse;
            coarseTuner2 = Util::TuneCoarse;
            fineTuner1 = Util::TuneFine;
            fineTuner2 = Util::TuneFine;
            waveFolder1 = Common::WaveFolder;
            waveFolder2 = Common::WaveFolder;
            filter = Controllers::Filter;
            cutoffCalc1 = Common::FilterCutoffCalculator;
            cutoffCalc2 = Common::FilterCutoffCalculator;
            brilliance = Common::Brilliance;
            brillianceMultiplier = Util::MultiplyStreams;
            gainCombiner = Util::MaxStreams;
        }

        connection
        {
            eventIn -> noteToFrequency;
            eventIn -> filter.eventIn;

            paramsIn -> oscillators.paramsIn;
            osc1Gain -> oscillators.osc1Gain;
            osc2Gain -> oscillators.osc2Gain;

            noteToFrequency -> coarseTuner1.in;
            noteToFrequency -> coarseTuner2.in;
            noteToFrequency -> cutoffCalc1.noteFreq;
            noteToFrequency -> cutoffCalc2.noteFreq;

            // @todo: decide if brilliance should be the raw frequency or the "tuned" frequency
            noteToFrequency -> brilliance.frequencyIn;

            coarseTuner1.out -> fineTuner1.in;
            coarseTuner2.out -> fineTuner2.in;

            fineTuner1.out -> oscillators.osc1FreqIn;
            fineTuner2.out -> oscillators.osc2FreqIn;

            paramsIn -> p.paramsIn;
            paramsIn -> filter.paramsIn;

            p.osc1Level -> levelSmoother1 -> level1.stream2;
            p.osc2Level -> levelSmoother2 -> level2.stream2;
            p.osc1Coarse -> coarseTuner1.octave;
            p.osc2Coarse -> coarseTuner2.octave;
            p.osc1Fine -> fineTuner1.cents;
            p.osc2Fine -> fineTuner2.cents;

            p.osc1Wavefolding -> waveFolder1.gain;
            p.osc2Wavefolding -> waveFolder2.gain;

            p.filter1Cutoff -> cutoffCalc1.baseCutoff;
            p.filter1Keytrack -> cutoffCalc1.keytrackIn;
            p.filter2Cutoff -> cutoffCalc2.baseCutoff;
            p.filter2Keytrack -> cutoffCalc2.keytrackIn;
            cutoffCalc1.cutoff -> filter.cutoff1;
            cutoffCalc2.cutoff -> filter.cutoff2;
            p.brilliance -> brilliance.amountIn;

            oscillators.out1 -> waveFolder1.in;
            oscillators.out2 -> waveFolder2.in;

            oscillators.out1 -> filter.osc1;
            oscillators.out2 -> filter.osc2;

            waveFolder1.out -> level1.stream1;
            waveFolder2.out -> level2.stream1;

            level1 -> filter.in;
            level2 -> filter.in;

            brilliance -> brillianceMultiplier.stream1;
            osc1Gain -> gainCombiner.stream1;
            osc2Gain -> gainCombiner.stream2;
            gainCombiner -> brillianceMultiplier.stream2;
            brillianceMultiplier -> out;

            filter.out -> out;
        }
    }
}