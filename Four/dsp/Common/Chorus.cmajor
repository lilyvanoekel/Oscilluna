namespace Common
{
    graph Chorus {
        input stream float in;
        output stream float<2> out;

        input event float feedbackIn;
        input event float delayTimeIn;
        input event float modDepthIn;
        input event float rateHzIn;
        input event float wetDryMixIn;

        event feedbackIn(float f) {
            delay1.feedbackIn <- f * 0.84f;
            delay2.feedbackIn <- f * 0.8f;
            delay3.feedbackIn <- f * 0.83f;
            delay4.feedbackIn <- f * 0.85f;
        }

        event delayTimeIn(float f) {
            delay1.delayTimeIn <- f * 0.92f;
            delay2.delayTimeIn <- f * 1.06f;
            delay3.delayTimeIn <- f * 1.03f;
            delay4.delayTimeIn <- f * 0.97f;
        }
        
        event modDepthIn(float f) {
            delay1.modDepthIn <- f * 0.85f / 50.0f;
            delay2.modDepthIn <- f * 1.15f / 50.0f;
            delay3.modDepthIn <- f * 1.04f / 50.0f;
            delay4.modDepthIn <- f * 0.92f / 50.0f;
        }

        event rateHzIn(float f) {
            lfo1.rateHzIn <- f * 0.91f;
            lfo2.rateHzIn <- f * 1.17f;
            lfo3.rateHzIn <- f * 1.09f;
            lfo4.rateHzIn <- f * 0.7f;
        }

        event wetDryMixIn(float f) {
            let dryGain = 1.0f - f;
            gainDry1.gainIn <- dryGain;
            gainDry2.gainIn <- dryGain;

            wetGain1.gainIn <- f;
            wetGain2.gainIn <- f;
            wetGain3.gainIn <- f;
            wetGain4.gainIn <- f;
        }

        node {
            lowPass = std::filters::butterworth::Processor (
                std::filters::butterworth::Mode::lowPass,
                10000.0f
            );

            crossover = std::filters::crossover::Processor (150.0f);

            lfo1 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f, 0.0f);
            lfo2 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f, 1.5708f);
            lfo3 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f, 3.14159f);
            lfo4 = std::oscillators::LFO (std::oscillators::Shape::sine, 1.0f, 1.0f, 4.71239f);
        
            delay1 = Common::DelayLine;
            delay2 = Common::DelayLine;
            delay3 = Common::DelayLine;
            delay4 = Common::DelayLine;
            
            delayOutputGain1 = std::levels::ConstantGain (float, 0.5f);
            delayOutputGain2 = std::levels::ConstantGain (float, 0.5f);
            delayOutputGain3 = std::levels::ConstantGain (float, 0.5f);
            delayOutputGain4 = std::levels::ConstantGain (float, 0.5f);

            gainDelay2Left = std::levels::ConstantGain (float, 0.5f);
            gainDelay2Right = std::levels::ConstantGain (float, 0.5f);
            gainDelay3Left = std::levels::ConstantGain (float, 0.5f);
            gainDelay3Right = std::levels::ConstantGain (float, 0.5f);

            wetGain1 = Util::DynamicGain;
            wetGain2 = Util::DynamicGain;
            wetGain3 = Util::DynamicGain;
            wetGain4 = Util::DynamicGain;

            gainDry1 = Util::DynamicGain;
            gainDry2 = Util::DynamicGain;

            outputNode = Util::DualStreamToVector;
        }

        connection
        {
            in -> crossover.in;
            crossover.highOut -> lowPass.in;
            
            lowPass -> delay1.in;
            lowPass -> delay2.in;
            lowPass -> delay3.in;
            lowPass -> delay4.in;

            lfo1 -> delay1.modIn;
            lfo2 -> delay2.modIn;
            lfo3 -> delay3.modIn;
            lfo4 -> delay4.modIn;

            delay1 -> delayOutputGain1 -> wetGain1.in;
            delay2 -> delayOutputGain2 -> wetGain2.in;
            delay3 -> delayOutputGain3 -> wetGain3.in;
            delay4 -> delayOutputGain4 -> wetGain4.in;

            wetGain1 -> outputNode.in1;

            wetGain2 -> gainDelay2Left -> outputNode.in1;
            wetGain2 -> gainDelay2Right -> outputNode.in2;

            wetGain3 -> gainDelay3Left -> outputNode.in1;
            wetGain3 -> gainDelay3Right -> outputNode.in2;

            wetGain4 -> outputNode.in2;
            
            crossover.highOut -> gainDry1.in; 
            crossover.highOut -> gainDry2.in; 

            gainDry1 -> outputNode.in1;
            gainDry2 -> outputNode.in2;

            crossover.lowOut -> outputNode.in1;
            crossover.lowOut -> outputNode.in2;

            outputNode -> out;
        }
    }
}