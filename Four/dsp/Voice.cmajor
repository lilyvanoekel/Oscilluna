namespace Synth
{
    graph Voice
    {
        input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;

        input event float adsr1Attack;
        input event float adsr1Decay;
        input event float adsr1Sustain;
        input event float adsr1Release;

        input event float adsr2Attack;
        input event float adsr2Decay;
        input event float adsr2Sustain;
        input event float adsr2Release;

        input event float osc1Level;
        input event float osc2Level;
        input event float osc1Coarse;
        input event float osc2Coarse;
        input event float osc1Fine;
        input event float osc2Fine;

        input oscBank.fmDirection, oscBank.fmDepth, oscBank.wavetableIn1, oscBank.wavetableIn2;

        output stream float out;

        node
        {
            oscBank = OscBank;
            envelope1 = Common::ADSR;
            envelope2 = Common::ADSR;
            noteToFrequency = Util::NoteToFrequency;
            level1 = std::levels::SmoothedGain(float, 0.2f);
            level2 = std::levels::SmoothedGain(float, 0.2f);
            coarseTuner1 = Util::TuneCoarse;
            coarseTuner2 = Util::TuneCoarse;
            fineTuner1 = Util::TuneFine;
            fineTuner2 = Util::TuneFine;
        }

        connection
        {
            eventIn -> noteToFrequency;

            noteToFrequency -> coarseTuner1.in;
            noteToFrequency -> coarseTuner2.in;

            coarseTuner1.out -> fineTuner1.in;
            coarseTuner2.out -> fineTuner2.in;

            fineTuner1.out -> oscBank.osc1FreqIn;
            fineTuner2.out -> oscBank.osc2FreqIn;

            eventIn -> envelope1.eventIn;
            eventIn -> envelope2.eventIn;
            
            adsr1Attack -> envelope1.attack;
            adsr1Decay -> envelope1.decay;
            adsr1Sustain -> envelope1.sustain;
            adsr1Release -> envelope1.release;

            adsr2Attack -> envelope2.attack;
            adsr2Decay -> envelope2.decay;
            adsr2Sustain -> envelope2.sustain;
            adsr2Release -> envelope2.release;

            osc1Level -> level1.volume;
            osc2Level -> level2.volume;
            osc1Coarse -> coarseTuner1.octave;
            osc2Coarse -> coarseTuner2.octave;
            osc1Fine -> fineTuner1.cents;
            osc2Fine -> fineTuner2.cents;

            envelope1.gainOut -> oscBank.osc1Gain;
            envelope2.gainOut -> oscBank.osc2Gain;

            oscBank.out1 -> level1.in;
            oscBank.out2 -> level2.in;

            level1 -> out;
            level2 -> out;
        }
    }
}