namespace Util
{
    processor NoteToFrequency
    {
        input event std::notes::NoteOn eventIn;
        output event float frequencyOut;

        event eventIn (std::notes::NoteOn e)
        {
            frequencyOut <- std::notes::noteToFrequency (e.pitch);
        }
    }

    processor DynamicGain {
        input stream float in;
        output stream float out;

        input event float gainIn;

        float gain = 1.0f;

        event gainIn(float g) {
            gain = g;
        }

        void main() {
            loop {
                out <- in * gain;
                advance();
            }
        }
    }

    processor BipolarToUnipolar {
        input stream float in;
        output stream float out;

        void main() {
            loop {
                out <- (in + 1.0f) * 0.5f;
                advance();
            }
        }
    }

    processor DualStreamToVector {
        input stream float in1, in2;
        output stream float<2> out;

        void main() {
            loop {
                out <- out.type(in1, in2);
                advance();
            }
        }
    }

    processor Mul(float32 m = 1.01f)
    {
        input event float32 in;
        output event float32 out;

        event in (float32 f)
        {
            out <- f * m;
        }
    }

    processor Add(float32 m = 1.0f)
    {
        input event float32 in;
        output event float32 out;

        event in (float32 f)
        {
            out <- f + m;
        }
    }

    processor TuneCoarse()
    {
        input event float32 in;
        output event float32 out;
        input event float32 octave;

        float oct = 0;

        event octave(float o) {
            oct = o;
        }

        event in (float32 f)
        {
            out <- f * pow(2.0f, oct);;
        }
    }

    processor TuneFine()
    {
        input event float32 in;
        output event float32 out;
        input event float32 cents;

        float fineTuneCents = 0;

        event cents(float c) {
            fineTuneCents = c;
        }

        event in (float32 f)
        {
            float adjustedFrequency = f * pow(2.0f, fineTuneCents / 1200.0f);
            out <- adjustedFrequency;
        }
    }

    int frequency_to_wavetable_index(float frequency, float f_min, float f_max, int num_wavetables)
    {
        float log2_f_min = log(f_min) / log(2.0f);
        float log2_f_max = log(f_max) / log(2.0f);
        float log2_f = log(frequency) / log(2.0f);
        int index = int((log2_f - log2_f_min) / (log2_f_max - log2_f_min) * float(num_wavetables - 1));

        if (index < 0)
            return 0;
        
        if (index >= num_wavetables)
            return num_wavetables - 1;
        
        return index;
    }

    float wavetable_index_to_max_frequency(int index, float f_min, float f_max, int num_wavetables)
    {
        float log2_f_min = log(f_min) / log(2.0f);
        float log2_f_max = log(f_max) / log(2.0f);
        float log2_f = log2_f_min + (float(index + 1) * (log2_f_max - log2_f_min) / float(num_wavetables));
        float frequency = pow(2.0f, log2_f);        
        return frequency;
    }

    float fmod2(float x) {
        return 2.0f * (x * 0.5f - floor(x * 0.5f));
    }

    // Fake sine approximation: https://bmtechjournal.wordpress.com/2020/05/27/super-fast-quadratic-sinusoid-approximation/
    float fakeSin(float x) {
        return x * (1.0f - abs(x));
    }

    float rangeLimiter(float x) {
        return fmod2(x + 1.0f) - 1.0f;
    }

    float fastSin(float x) {
        return fakeSin(rangeLimiter(x));
    }

    float fastTanh(float x) {
        if (x > 3.0f) return 1.0f;
        if (x < -3.0f) return -1.0f;
        float x2 = x * x;
        return x * (27.0f + x2) / (27.0f + 9.0f * x2);
    }
}