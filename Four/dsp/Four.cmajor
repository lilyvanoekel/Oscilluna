namespace Synth
{
    graph Four  [[main]]
    {
        input event std::midi::Message midiIn;

        input waveControlPointParams.*;
        input paramsProcessor.*;
        
        input event float osc1_vibrato_rate     [[ name: "osc1_vibrato_rate", min: 0.5, max: 10.0, init: 0.423]];
        input event float osc2_vibrato_rate     [[ name: "osc2_vibrato_rate", min: 0.5, max: 10.0, init: 0.8146]];
        input event float osc1_vibrato_depth    [[ name: "osc1_vibrato_depth", min: 0.0, max: 1.0, init: 0.0]];
        input event float osc2_vibrato_depth    [[ name: "osc2_vibrato_depth", min: 0.0, max: 1.0, init: 0.0]];

        output stream float out;

        let voiceCount = VOICE_COUNT;

        node
        {
            paramsProcessor = ParamsProcessor;
            voices = Voice[voiceCount];
            builder1 = WaveBuilder;
            builder2 = WaveBuilder;
            voiceAllocator = std::voices::VoiceAllocator (voiceCount);
            waveControlPointParams = WaveControlPointParams;
            vibratoLfo1 = std::oscillators::LFO();
            vibratoLfo2 = std::oscillators::LFO();

            // fineTuneSmoother = std::smoothing::SmoothedValueStream (0.02f);
        }
    
        connection
        {
            midiIn -> std::midi::MPEConverter -> voiceAllocator;
            voiceAllocator.voiceEventOut -> voices.eventIn;
            paramsProcessor.paramsOut -> voices.paramsIn;

            osc1_vibrato_rate -> vibratoLfo1.rateHzIn;
            osc2_vibrato_rate -> vibratoLfo2.rateHzIn;
            vibratoLfo1.out -> voices.vibrato1;
            vibratoLfo2.out -> voices.vibrato2;
            osc1_vibrato_depth -> voices.vibratoDepth1;
            osc2_vibrato_depth -> voices.vibratoDepth2;
            
            waveControlPointParams.controlPoints1 -> builder1.controlPoints;
            waveControlPointParams.controlPoints2 -> builder2.controlPoints;
            builder1.waveOut -> voices.wavetableIn1;
            builder2.waveOut -> voices.wavetableIn2;
            voices -> std::levels::ConstantGain (float, 0.3f) -> out;
        }
    }
}
