namespace Synth
{
    graph Four  [[main]]
    {
        input event std::midi::Message midiIn;

        input waveControlPointParams.*;

        input event float adsr1_attack  [[ name: "adsr1_attack", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr1_decay   [[ name: "adsr1_decay", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr1_sustain [[ name: "adsr1_sustain", min: 0.0, max: 1.0, init: 0.7 ]];
        input event float adsr1_release [[ name: "adsr1_release", min: 0.0, max: 1.0, init: 0.1 ]];

        input event float adsr2_attack  [[ name: "adsr2_attack", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr2_decay   [[ name: "adsr2_decay", min: 0.0, max: 1.0, init: 0.1 ]];
        input event float adsr2_sustain [[ name: "adsr2_sustain", min: 0.0, max: 1.0, init: 0.7 ]];
        input event float adsr2_release [[ name: "adsr2_release", min: 0.0, max: 1.0, init: 0.1 ]];

        input event float osc1_level    [[ name: "osc1_level", unit: "dB", min: -85, max: 6, init: 0 ]];
        input event float osc2_level    [[ name: "osc2_level", unit: "dB", min: -85, max: 6, init: 0 ]];

        input event float osc1_coarse   [[ name: "osc1_coarse", min: -2, max: 2, init: 0, step: 1 ]];
        input event float osc2_coarse   [[ name: "osc2_coarse", min: -2, max: 2, init: 0, step: 1 ]];

        input event float osc1_fine     [[ name: "osc1_fine", min: -20, max: 20, init: 0, step: 1 ]];
        input event float osc2_fine     [[ name: "osc2_fine", min: -20, max: 20, init: 0, step: 1 ]];

        output stream float out;

        let voiceCount = VOICE_COUNT;

        node
        {
            voices = Voice[voiceCount];
            builder1 = WaveBuilder;
            builder2 = WaveBuilder;
            voiceAllocator = std::voices::VoiceAllocator (voiceCount);
            waveControlPointParams = WaveControlPointParams;

            // fineTuneSmoother = std::smoothing::SmoothedValueStream (0.02f);
        }
    
        connection
        {
            midiIn -> std::midi::MPEConverter -> voiceAllocator;
            voiceAllocator.voiceEventOut -> voices.eventIn;

            adsr1_attack -> voices.adsr1Attack;
            adsr1_decay -> voices.adsr1Decay;
            adsr1_sustain -> voices.adsr1Sustain;
            adsr1_release -> voices.adsr1Release;

            adsr2_attack -> voices.adsr2Attack;
            adsr2_decay -> voices.adsr2Decay;
            adsr2_sustain -> voices.adsr2Sustain;
            adsr2_release -> voices.adsr2Release;

            osc1_level -> voices.osc1Level;
            osc2_level -> voices.osc2Level;
            osc1_coarse -> voices.osc1Coarse;
            osc2_coarse -> voices.osc2Coarse;
            osc1_fine -> voices.osc1Fine;
            osc2_fine -> voices.osc2Fine;

            waveControlPointParams.controlPoints1 -> builder1.controlPoints;
            waveControlPointParams.controlPoints2 -> builder2.controlPoints;
            builder1.waveOut -> voices.wavetableIn1;
            builder2.waveOut -> voices.wavetableIn2;
            voices -> std::levels::ConstantGain (float, 0.3f) -> out;
        }
    }
}
