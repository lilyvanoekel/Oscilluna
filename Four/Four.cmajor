processor NoteToFrequency
{
    input event std::notes::NoteOn eventIn;
    output event float frequencyOut;

    event eventIn (std::notes::NoteOn e)
    {
        frequencyOut <- std::notes::noteToFrequency (e.pitch);
    }
}


processor WavetableOscillator
{
    input event float frequencyIn;
    input event float[1024] wavetableIn;
    output stream float out;

    float phase = 0.0f;
    float phaseIncrement = 0.0f;
    float freq = 0.0f;
    const int32 tableSize = 1024;
    float[tableSize] wavetable;

    void init()
    {
        for (wrap<tableSize> i)
        {
            let phase = float (2.0 * pi * i / tableSize);
            wavetable[i] = sin(phase);
        }
    }

    event frequencyIn (float f)
    {
        freq = f;
    }

    event wavetableIn (float[tableSize] newTable)
    {
        wavetable = newTable;
    }
 
    void main()
    {
        loop
        {
            phaseIncrement = freq * (1024.0f / float(processor.frequency));
            phase += phaseIncrement;
            phase -= floor(phase / 1024.0f) * 1024.0f;
            let index = int32(phase);
            out <- wavetable[wrap<tableSize>(index)];
            advance();
        }
    }
}

graph Voice
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input event float[1024] wavetableIn;
    output stream float out;

    node
    {
        oscillator = WavetableOscillator;
        envelope = std::envelopes::FixedASR (0.01f, 0.1f);
        noteToFrequency = NoteToFrequency;
    }

    connection
    {
        eventIn -> noteToFrequency -> oscillator.frequencyIn;
        eventIn -> envelope.eventIn;
        wavetableIn -> oscillator.wavetableIn;
        (envelope.gainOut * oscillator.out) -> out;
    }
}


graph Four  [[main]]
{
    input event std::midi::Message midiIn;
    input event float[1024] wavetableIn;
    output stream float out;

    let voiceCount = 8;

    node
    {
        voices = Voice[voiceCount];
        voiceAllocator = std::voices::VoiceAllocator (voiceCount);
    }
 
    connection
    {
        midiIn -> std::midi::MPEConverter -> voiceAllocator;
        voiceAllocator.voiceEventOut -> voices.eventIn;
        wavetableIn -> voices.wavetableIn;
        voices -> std::levels::ConstantGain (float, 0.3f) -> out;
    }
}
