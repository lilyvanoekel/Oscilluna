namespace Synth
{
    graph Voice
    {
        input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
        input event float[] wavetableIn;
        input event float[] wavetableIn2;
        output stream float out;

        node
        {
            oscillator = WavetableOscillator;
            envelope = std::envelopes::FixedASR (0.01f, 0.1f);
            noteToFrequency = Util::NoteToFrequency;
        }

        connection
        {
            eventIn -> noteToFrequency -> oscillator.frequencyIn;
            eventIn -> envelope.eventIn;
            wavetableIn -> oscillator.wavetableIn;
            wavetableIn2 -> oscillator.wavetableIn2;
            (envelope.gainOut * oscillator.out) -> out;
        }
    }

    graph Four  [[main]]
    {
        input event std::midi::Message midiIn;
        input waveControlPointParams.*;
        output stream float out;

        let voiceCount = VOICE_COUNT;

        node
        {
            voices = Voice[voiceCount];
            builder = WaveBuilder;
            voiceAllocator = std::voices::VoiceAllocator (voiceCount);
            waveControlPointParams = WaveControlPointParams;
        }
    
        connection
        {
            midiIn -> std::midi::MPEConverter -> voiceAllocator;
            voiceAllocator.voiceEventOut -> voices.eventIn;
            waveControlPointParams.controlPoints -> builder.controlPoints;
            builder.waveOut -> voices.wavetableIn;
            builder.waveOut2 -> voices.wavetableIn2;
            voices -> std::levels::ConstantGain (float, 0.3f) -> out;
        }
    }
}
