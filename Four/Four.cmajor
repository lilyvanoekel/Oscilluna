namespace Synth
{
    graph Voice
    {
        input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
        input event float[] wavetableIn1;
        input event float[] wavetableIn2;
        output stream float out;

        node
        {
            oscillator1 = WavetableOscillator;
            oscillator2 = WavetableOscillator;
            envelope1 = std::envelopes::FixedASR (0.05f, 0.1f);
            envelope2 = std::envelopes::FixedASR (0.01f, 0.1f);
            noteToFrequency = Util::NoteToFrequency;
        }

        connection
        {
            eventIn -> noteToFrequency -> oscillator1.frequencyIn;
            eventIn -> noteToFrequency -> oscillator2.frequencyIn;
            eventIn -> envelope1.eventIn;
            eventIn -> envelope2.eventIn;
            wavetableIn1 -> oscillator1.wavetableIn;
            wavetableIn2 -> oscillator2.wavetableIn;
            envelope1.gainOut -> oscillator1.gainIn;
            envelope2.gainOut -> oscillator2.gainIn;
            oscillator1.out -> oscillator2.fmIn;
            oscillator2.out -> out;
        }
    }

    graph Four  [[main]]
    {
        input event std::midi::Message midiIn;
        input waveControlPointParams.*;
        output stream float out;

        let voiceCount = VOICE_COUNT;

        node
        {
            voices = Voice[voiceCount];
            builder1 = WaveBuilder;
            builder2 = WaveBuilder;
            voiceAllocator = std::voices::VoiceAllocator (voiceCount);
            waveControlPointParams = WaveControlPointParams;
        }
    
        connection
        {
            midiIn -> std::midi::MPEConverter -> voiceAllocator;
            voiceAllocator.voiceEventOut -> voices.eventIn;
            waveControlPointParams.controlPoints1 -> builder1.controlPoints;
            waveControlPointParams.controlPoints2 -> builder2.controlPoints;
            builder1.waveOut -> voices.wavetableIn1;
            builder2.waveOut -> voices.wavetableIn2;
            voices -> std::levels::ConstantGain (float, 0.3f) -> out;
        }
    }
}
